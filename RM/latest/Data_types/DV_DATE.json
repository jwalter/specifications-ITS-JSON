{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Data_types/DV_DATE.json",
    "title": "DV_DATE",
    "description": "Represents an absolute point in time, as measured on the Gregorian calendar, and specified only to the day. Semantics defined by ISO 8601. Used for recording dates in real world time. The partial form is used for approximate birth dates, dates of death, etc.\n",
    "$comments": "Defined in Data_types IM, inherits from DV_TEMPORAL, Iso8601_date",
    "type": "object",
    "properties": {
        "value": {
            "description": "ISO8601 date string.",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/String"
        },
        "normal_status": {
            "description": "Optional normal status indicator of value with respect to normal range for this value. Often included by lab, even if the normal range itself is not included. Coded by ordinals in series HHH, HH, H, (nothing), L, LL, LLL; see openEHR terminology group  `normal_status`. ",
            "$ref": "all.json#/definitions/CODE_PHRASE"
        },
        "normal_range": {
            "description": "Optional normal range. ",
            "$ref": "all.json#/definitions/DV_INTERVAL"
        },
        "other_reference_ranges": {
            "description": "Optional tagged other reference ranges for this value in its particular measurement context.",
            "type": "array",
            "items": {
                "$ref": "all.json#/definitions/REFERENCE_RANGE"
            }
        },
        "magnitude_status": {
            "description": "Optional status of magnitude with values: \n\n* `\"=\"`   :   magnitude is a point value \n* `\"<\"`   :   value is < magnitude \n* `\">\"`   :   value is > magnitude \n* `\"<=\"` : value is <= magnitude \n* `\">=\"` : value is >= magnitude \n* `\"~\"`   :   value is approximately magnitude \n\nIf not present, assumed meaning is  `\"=\"` . \n",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/String"
        },
        "accuracy": {
            "description": "Time accuracy, expressed as a duration.",
            "$ref": "all.json#/definitions/DV_DURATION"
        }
    },
    "required": [
        "value"
    ],
    "$inherits": [
        "all.json#/definitions/DV_TEMPORAL",
        "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Iso8601_date"
    ],
    "$functions": {
        "valid_year": {
            "description": null
        },
        "valid_month": {
            "description": null
        },
        "valid_day": {
            "description": "True if d >= 1 and d <= days_in_month (m, y)"
        },
        "valid_hour": {
            "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
        },
        "valid_minute": {
            "description": "True if m >= 0 and m < Minutes_in_hour."
        },
        "valid_second": {
            "description": "True if s >= 0 and s < Seconds_in_minute ."
        },
        "valid_fractional_second": {
            "description": "True if fs >= 0.0 and fs < 1.0 ."
        },
        "valid_iso8601_date": {
            "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
        },
        "valid_iso8601_time": {
            "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
        },
        "valid_iso8601_date_time": {
            "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
        },
        "valid_iso8601_duration": {
            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
        },
        "infix <": {
            "description": "Tests if this date is earlier than the cited date."
        },
        "is_partial": {
            "description": "True if this date is partial, i.e. if days or more is missing."
        },
        "is_extended": {
            "description": "True if this date uses `'-'` separators."
        },
        "year": {
            "description": "Year."
        },
        "month": {
            "description": "Month in year."
        },
        "day": {
            "description": "Day in month."
        },
        "timezone": {
            "description": "Timezone; may be Void."
        },
        "month_unknown": {
            "description": "Indicates whether month in year is unknown. If so, the date is of the form `\"YYYY\"`."
        },
        "day_unknown": {
            "description": "Indicates whether day in month is unknown. If so, and month is known, the date is of the form `\"YYYY-MM\"` or `\"YYYYMM\"`."
        },
        "as_string": {
            "description": "Return string value in extended format."
        },
        "is_strictly_comparable_to": {
            "description": "Test if two instances are strictly comparable."
        },
        "is_simple": {
            "description": "True if this quantity has no reference ranges."
        },
        "is_normal": {
            "description": "Value is in the normal range, determined by comparison of the value to the normal_range if present, or by the normal_status marker if present. \n"
        },
        "valid_magnitude_status": {
            "description": "Test whether a string value is one of the valid values for the magnitude_status attribute. "
        },
        "magnitude": {
            "description": "Numeric value of the date as days since the calendar origin date `0001-01-01`."
        },
        "accuracy_unknown": {
            "description": "True if accuracy is not known, e.g. due to not being recorded or discernable."
        },
        "diff": {
            "description": "Difference of two quantities."
        },
        "add": {
            "description": "Add a time period to this date."
        },
        "subtract": {
            "description": "Subtract a time period from this date."
        }
    },
    "$invariants": {
        "Post": {
            "description": "Result = s.is_equal (\u201c=\u201d) or s.is_equal (\u201c<\u201d) or s.is_equal (\u201c>\u201d) or s.is_equal (\u201c<=\u201d) or s.is_equal (\u201c>=\u201d) or s.is_equal (\u201c~\u201d)"
        },
        "Year_valid": {
            "description": "valid_year (year)"
        },
        "Month_valid": {
            "description": "not month_unknown implies valid_month (month)"
        },
        "Day_valid": {
            "description": "not day_unknown implies valid_day (year, month, day)"
        },
        "Partial_validity": {
            "description": "month_unknown implies day_unknown"
        },
        "Pre": {
            "description": "normal_range /= Void or normal_status /= Void"
        },
        "Other_reference_ranges_validity": {
            "description": "other_reference_ranges /= Void implies not other_reference_ranges.is_empty"
        },
        "Is_simple_validity": {
            "description": "(normal_range = Void and other_reference_ranges = Void) implies is_simple"
        },
        "Normal_status_validity": {
            "description": "normal_status /= Void implies code_set (Code_set_id_normal_statuses).has_code (normal_status)"
        },
        "Normal_range_and_status_consistency": {
            "description": "(normal_range /= Void and normal_status /= Void) implies (normal_status.code_string.is_equal (\u201cN\u201d) xor not normal_range.has (self))"
        },
        "Post_range": {
            "description": "normal_range /= Void implies Result = normal_range.has (self)"
        },
        "Post_status": {
            "description": "normal_status /= Void implies normal_status.code_string.is_equal (\u201cN\u201d)"
        },
        "Magnitude_status_valid": {
            "description": "magnitude_status /= Void implies valid_magnitude_status (magnitude_status)"
        },
        "Value_valid": {
            "description": "valid_iso8601_date(value)"
        }
    }
}