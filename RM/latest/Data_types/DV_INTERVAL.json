{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Data_types/DV_INTERVAL.json",
    "title": "DV_INTERVAL",
    "description": "Generic class defining an interval (i.e. range) of a comparable type. An interval is a contiguous subrange of a comparable base type. Used to define intervals of dates, times, quantities (whose units match) and so on. The type parameter, `T`, must be a descendant of the type `DV_ORDERED`, which is necessary (but not sufficient) for instances to be compared (`_strictly_comparable_` is also needed). \n\nWithout the `DV_INTERVAL` class, quite a few more `DV_` classes would be needed to express logical intervals, namely interval versions of all the date/time classes, and of quantity classes. Further, it allows the semantics of intervals to be stated in one place unequivocally, including the conditions for strict comparison. \n\nThe basic semantics are derived from the class `Interval<T>`, described in the support RM. ",
    "$comments": "Defined in Data_types IM, inherits from DATA_VALUE, Interval",
    "type": "object",
    "properties": {
        "lower": {
            "description": "lower bound.",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
        },
        "lower_unbounded": {
            "description": "lower boundary open (i.e. = -infinity)",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Boolean"
        },
        "upper_unbounded": {
            "description": "upper boundary open (i.e. = +infinity)",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Boolean"
        },
        "lower_included": {
            "description": "lower boundary value included in range if not lower_unbounded.",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Boolean"
        },
        "upper_included": {
            "description": "upper boundary value included in range if not upper_unbounded.",
            "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Boolean"
        }
    },
    "required": [
        "lower_unbounded",
        "upper_unbounded",
        "lower_included",
        "upper_included"
    ],
    "$inherits": [
        "all.json#/definitions/DATA_VALUE",
        "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json#/definitions/Interval"
    ],
    "$functions": {
        "has": {
            "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
        },
        "intersects": {
            "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
        },
        "contains": {
            "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
        },
        "is_equal": {
            "description": "True if current object's interval is semantically same as `other'."
        },
        "upper": {
            "description": null
        }
    },
    "$invariants": {
        "Lower_included_valid": {
            "description": "lower_unbounded implies not lower_included"
        },
        "Upper_included_valid": {
            "description": "upper_unbounded implies not upper_included"
        },
        "Limits_consistent": {
            "description": "(not upper_unbounded and not lower_unbounded) implies (lower.is_strictly_comparable_to(upper) and lower <= upper)"
        },
        "Limits_comparable": {
            "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
        }
    }
}