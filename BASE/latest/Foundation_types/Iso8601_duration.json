{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/Iso8601_duration.json",
    "title": "Iso8601_duration",
    "description": "Represents an ISO 8601 duration, which may have multiple parts from years down to seconds. Value is in format:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`",
    "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
    "type": "object",
    "properties": {
        "value": {
            "description": "Representation of all descendants is a single String.",
            "$ref": "all.json#/definitions/String"
        }
    },
    "required": [
        "value"
    ],
    "$inherits": [
        "all.json#/definitions/Iso8601_type"
    ],
    "$functions": {
        "valid_year": {
            "description": null
        },
        "valid_month": {
            "description": null
        },
        "valid_day": {
            "description": "True if d >= 1 and d <= days_in_month (m, y)"
        },
        "valid_hour": {
            "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
        },
        "valid_minute": {
            "description": "True if m >= 0 and m < Minutes_in_hour."
        },
        "valid_second": {
            "description": "True if s >= 0 and s < Seconds_in_minute ."
        },
        "valid_fractional_second": {
            "description": "True if fs >= 0.0 and fs < 1.0 ."
        },
        "valid_iso8601_date": {
            "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
        },
        "valid_iso8601_time": {
            "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
        },
        "valid_iso8601_date_time": {
            "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
        },
        "valid_iso8601_duration": {
            "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
        },
        "infix <": {
            "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
        },
        "is_partial": {
            "description": "Returns False."
        },
        "is_extended": {
            "description": "Returns True."
        },
        "seconds": {
            "description": "Number of seconds."
        },
        "fractional_seconds": {
            "description": "Fractional seconds."
        },
        "is_decimal_sign_comma": {
            "description": "True if this time has a decimal part indicated by ',' (comma) rather than '.' (period)."
        },
        "months": {
            "description": "Number of months."
        },
        "years": {
            "description": "Number of years of nominal 365-day length."
        },
        "weeks": {
            "description": "Number of 7 day weeks."
        },
        "to_seconds": {
            "description": "Total number of seconds equivalent (including fractional) of entire duration."
        },
        "minutes": {
            "description": "Number of 60 second minutes."
        },
        "hours": {
            "description": "Number of 60 minute hours."
        },
        "days": {
            "description": "Number of 24 hour days."
        },
        "as_string": {
            "description": "Return the duration string value."
        }
    },
    "$invariants": {
        "Post": {
            "description": "Result = fs >= 0.0 and fs < 1.0 ."
        },
        "Years_valid": {
            "description": "years >= 0"
        },
        "Months_valid": {
            "description": "months >= 0"
        },
        "Weeks_valid": {
            "description": "weeks >= 0"
        },
        "Days_valid": {
            "description": "days >= 0"
        },
        "Hours_valid": {
            "description": "hours >= 0"
        },
        "Minutes_valid": {
            "description": "minutes >= 0"
        },
        "Seconds_valid": {
            "description": "seconds >= 0"
        },
        "Fractional_second_valid": {
            "description": "fractional_second >= 0.0 and fractional_second < 1.0"
        }
    }
}