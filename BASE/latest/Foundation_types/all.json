{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/BASE/latest/Foundation_types/all.json",
    "title": "Foundation_types IM definitions",
    "description": "The openEHR Base types.",
    "definitions": {
        "Hash": {
            "title": "Hash",
            "description": "Type representing a keyed table of values. T is the value type, and U the type of the keys. ",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "object",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "has_key": {
                    "description": "Test for membership of a key."
                },
                "item": {
                    "description": "Return item for key  a_key'."
                }
            }
        },
        "Hash<String, Hash<String, Hash<String, String>>>": {
            "title": "Hash<String, Hash<String, Hash<String, String>>>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "has_key": {
                    "description": "Test for membership of a key."
                },
                "item": {
                    "description": "Return item for key  a_key'."
                }
            }
        },
        "Hash<String, Hash<String, String>>": {
            "title": "Hash<String, Hash<String, String>>",
            "description": "Two-level hash map structure, typically used for two levels of keyed tables, e.g. with outer keys = language (\"en\", \"zh\" etc) and inner keys = some tag or id or path.",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "has_key": {
                    "description": "Test for membership of a key."
                },
                "item": {
                    "description": "Return item for key  a_key'."
                }
            }
        },
        "Hash<String, String>": {
            "title": "Hash<String, String>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "has_key": {
                    "description": "Test for membership of a key."
                },
                "item": {
                    "description": "Return item for key  a_key'."
                }
            }
        },
        "Container": {
            "title": "Container",
            "description": "Abstract ancestor of container types whose items are addressable in some way.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "array",
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                }
            }
        },
        "List": {
            "title": "List",
            "description": "Ordered container that may contain duplicates.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "first": {
                    "description": "Return first element."
                },
                "last": {
                    "description": "Return last element."
                }
            },
            "$invariants": {
                "First_validity": {
                    "description": "not is_empty implies first /= Void"
                },
                "Last_validity": {
                    "description": "not is_empty implies last /= Void"
                }
            }
        },
        "Set": {
            "title": "Set",
            "description": "Unordered container that may not contain duplicates.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                }
            }
        },
        "Array": {
            "title": "Array",
            "description": "Container whose storage is assumed to be contiguous.",
            "$comments": "Defined in Foundation_types IM, inherits from Container",
            "type": "array",
            "$inherits": [
                "#/definitions/Container"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                }
            }
        },
        "Set<String>": {
            "title": "Set<String>",
            "$comments": "Defined in Foundation_types IM, inherits from Set",
            "type": "array",
            "$inherits": [
                "#/definitions/Set"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                }
            }
        },
        "List<String>": {
            "title": "List<String>",
            "$comments": "Defined in Foundation_types IM, inherits from List",
            "type": "array",
            "$inherits": [
                "#/definitions/List"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "first": {
                    "description": "Return first element."
                },
                "last": {
                    "description": "Return last element."
                }
            },
            "$invariants": {
                "First_validity": {
                    "description": "not is_empty implies first /= Void"
                },
                "Last_validity": {
                    "description": "not is_empty implies last /= Void"
                }
            }
        },
        "Hash<String, List<String>>": {
            "title": "Hash<String, List<String>>",
            "$comments": "Defined in Foundation_types IM, inherits from Hash",
            "type": "object",
            "$inherits": [
                "#/definitions/Hash"
            ],
            "$functions": {
                "has": {
                    "description": "Test for membership of a value."
                },
                "count": {
                    "description": "Number of items in container."
                },
                "is_empty": {
                    "description": "True if container is empty."
                },
                "has_key": {
                    "description": "Test for membership of a key."
                },
                "item": {
                    "description": "Return item for key  a_key'."
                }
            }
        },
        "Hash<String, Any>": {
            "title": "Hash<String, Any>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Uri": {
            "title": "Uri",
            "$comments": "Defined in Foundation_types IM, inherits from String",
            "type": "string",
            "$inherits": [
                "#/definitions/String"
            ],
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "infix +": {
                    "description": "Concatenation operator - causes \u2018other\u2019 to be appended to this string."
                },
                "is_empty": {
                    "description": "True if string is empty, i.e. equal to \"\"."
                },
                "is_integer": {
                    "description": "True if string can be parsed as an integer."
                },
                "as_integer": {
                    "description": "Return the integer corresponding to the integer value represented in this string."
                }
            }
        },
        "Comparable": {
            "title": "Comparable",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "object"
        },
        "Ordered_Numeric": {
            "title": "Ordered_Numeric",
            "description": "Abstract notional parent class of ordered, numeric types, which are types with \u2018<\u2018 and arithmetic operators defined.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered, Numeric",
            "type": "number",
            "$inherits": [
                "#/definitions/Ordered",
                "#/definitions/Numeric"
            ],
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Integer": {
            "title": "Integer",
            "description": "Class representing minimal interface of standard Integer type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Double": {
            "title": "Double",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "number",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Numeric": {
            "title": "Numeric",
            "description": "Abstract notional parent class of numeric types, which are types which have various arithmetic and comparison operators defined.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "number",
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                }
            }
        },
        "Octet": {
            "title": "Octet",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Character": {
            "title": "Character",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "string",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Boolean": {
            "title": "Boolean",
            "description": "Class representing minimal interface of standard Boolean type.",
            "$comments": "Defined in Foundation_types IM",
            "type": "boolean",
            "$functions": {
                "infix and": {
                    "description": "Logical conjunction"
                },
                "infix and_then": {
                    "description": "Boolean semi-strict conjunction with other"
                },
                "infix or": {
                    "description": "Boolean disjunction with other."
                },
                "infix or_else": {
                    "description": "Boolean semi-strict disjunction with `other'."
                },
                "infix xor": {
                    "description": "Boolean exclusive or with `other'."
                },
                "infix implies": {
                    "description": "Boolean implication of `other' (semi-strict)"
                }
            },
            "$invariants": {
                "Involutive_negation": {
                    "description": "is_equal (not (not self))"
                },
                "Non_contradiction": {
                    "description": "not (self and (not self))"
                },
                "Completeness": {
                    "description": "self or else (not self)"
                },
                "Post_de_Morgan": {
                    "description": "Result = not (not self and then not other)"
                },
                "Post_commutative": {
                    "description": "Result = (other or Current)"
                },
                "Post_consistent_with_semi_strict": {
                    "description": "Result implies (self or else other)"
                },
                "Post_definition": {
                    "description": "Result = (not self or else other)"
                }
            }
        },
        "String": {
            "title": "String",
            "description": "Strings of characters, as used to represent textual data in any natural or formal language.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered",
            "type": "string",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "infix +": {
                    "description": "Concatenation operator - causes \u2018other\u2019 to be appended to this string."
                },
                "is_empty": {
                    "description": "True if string is empty, i.e. equal to \"\"."
                },
                "is_integer": {
                    "description": "True if string can be parsed as an integer."
                },
                "as_integer": {
                    "description": "Return the integer corresponding to the integer value represented in this string."
                }
            }
        },
        "Real": {
            "title": "Real",
            "description": "Type used to represent decimal numbers. Corresponds to a single-precision floating point value in most languages.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "number",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "floor": {
                    "description": "Return the greatest integer no greater than the value of this object."
                }
            }
        },
        "Integer64": {
            "title": "Integer64",
            "description": "Class representing minimal interface of standard Integer64 type.",
            "$comments": "Defined in Foundation_types IM, inherits from Ordered_Numeric",
            "type": "integer",
            "$inherits": [
                "#/definitions/Ordered_Numeric"
            ],
            "$functions": {
                "infix *": {
                    "description": "Product by `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix +": {
                    "description": "Sum with `other' (commutative). Actual type of result depends on arithmetic balancing rules."
                },
                "infix -": {
                    "description": "Result of subtracting `other'. Actual type of result depends on arithmetic balancing rules."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Ordered": {
            "title": "Ordered",
            "description": "Abstract notional parent class of ordered, types i.e. types on which the \u2018<\u2018 operator is defined.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "object",
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "TUPLE": {
            "title": "TUPLE",
            "description": "Parent type of all TUPLE types.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "FUNCTION": {
            "title": "FUNCTION",
            "description": "Type representing a function with a return type and 0 or more arguments represented as a TUPLE.",
            "$comments": "Defined in Foundation_types IM, inherits from ROUTINE",
            "type": "object",
            "$inherits": [
                "#/definitions/ROUTINE"
            ]
        },
        "TUPLE2<Boolean,Boolean>": {
            "title": "TUPLE2<Boolean,Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE2",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE2"
            ]
        },
        "TUPLE1": {
            "title": "TUPLE1",
            "description": "A Tuple type used, among other things, for representing a single typed argument within a Routine signature.",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE"
            ]
        },
        "TUPLE2": {
            "title": "TUPLE2",
            "description": "A Tuple type used, among other things, for representing two typed arguments within a Routine signature.",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE"
            ]
        },
        "TUPLE2<Numeric,Numeric>": {
            "title": "TUPLE2<Numeric,Numeric>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE2",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE2"
            ]
        },
        "TUPLE1<Boolean>": {
            "title": "TUPLE1<Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE1",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE1"
            ]
        },
        "FUNCTION<<Boolean,Boolean>,Boolean>": {
            "title": "FUNCTION<<Boolean,Boolean>,Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "FUNCTION<<Boolean>,Boolean>": {
            "title": "FUNCTION<<Boolean>,Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "FUNCTION<<Numeric,Numeric>,Numeric>": {
            "title": "FUNCTION<<Numeric,Numeric>,Numeric>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "FUNCTION<<Numeric>,Numeric>": {
            "title": "FUNCTION<<Numeric>,Numeric>",
            "description": "Represents a function with signature\n\n   func (v: Numeric): Numeric",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "TUPLE1<Numeric>": {
            "title": "TUPLE1<Numeric>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE1",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE1"
            ]
        },
        "ROUTINE": {
            "title": "ROUTINE",
            "description": "Type representing a function with a return type and 0 or more arguments represented as a TUPLE.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "PROCEDURE": {
            "title": "PROCEDURE",
            "description": "Type representing a procedure with 0 or more arguments represented as a TUPLE.",
            "$comments": "Defined in Foundation_types IM, inherits from ROUTINE",
            "type": "object",
            "$inherits": [
                "#/definitions/ROUTINE"
            ]
        },
        "FUNCTION<<Any>,Boolean>": {
            "title": "FUNCTION<<Any>,Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "TUPLE1<Any>": {
            "title": "TUPLE1<Any>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE1",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE1"
            ]
        },
        "FUNCTION<TUPLE,Any>": {
            "title": "FUNCTION<TUPLE,Any>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "FUNCTION<<String,String>,Boolean>": {
            "title": "FUNCTION<<String,String>,Boolean>",
            "$comments": "Defined in Foundation_types IM, inherits from FUNCTION",
            "type": "object",
            "$inherits": [
                "#/definitions/FUNCTION"
            ]
        },
        "TUPLE2<String,String>": {
            "title": "TUPLE2<String,String>",
            "$comments": "Defined in Foundation_types IM, inherits from TUPLE2",
            "type": "object",
            "$inherits": [
                "#/definitions/TUPLE2"
            ]
        },
        "Any": {
            "title": "Any",
            "description": "Abstract supertype. Usually maps to a type like Any or Object in an object-oriented technology. Defined here to provide value and reference equality semantics.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "object",
            "$functions": {
                "is_equal": {
                    "description": "Value equality."
                },
                "infix =": {
                    "description": "Reference equality."
                },
                "instance_of": {
                    "description": "Create new instance of a type."
                },
                "type_of": {
                    "description": "Type name of an object as a string. May include generic parameters, as in \"Interval<Time>\"."
                }
            }
        },
        "Iso8601_date_time": {
            "title": "Iso8601_date_time",
            "description": "Represents an ISO 8601 date/time, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DDThh:mm:ss[,sss][Z | \u00b1hh[mm]]` (extended, preferred) or\n* `YYYYMMDDThhmmss[,sss][Z | \u00b1hh[mm]]` (compact)\n* or a partial variant.\n\nSee `_valid_iso8601_date_time()_` for validity.\n\nNote that this class includes 2 deviations from ISO 8601:2004:\n\n* for partial date/times, any part of the date/time up to the month may be missing, not just seconds and minutes as in the standard;\n* the time `24:00:00` is not allowed, since it would mean the date was really on the next day.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "string",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "True if this date time is partial, i.e. if seconds or more is missing."
                },
                "is_extended": {
                    "description": "True if this date/time uses \u2018-\u2019, \u2018:\u2019 separators."
                },
                "year": {
                    "description": "Year."
                },
                "month": {
                    "description": "Month in year."
                },
                "day": {
                    "description": "Day in month."
                },
                "hour": {
                    "description": "Hour in day."
                },
                "minute": {
                    "description": "Minute in hour."
                },
                "second": {
                    "description": "Second in minute."
                },
                "fractional_second": {
                    "description": "Fractional seconds."
                },
                "timezone": {
                    "description": "Timezone; may be Void."
                },
                "month_unknown": {
                    "description": "Indicates whether month in year is unknown."
                },
                "day_unknown": {
                    "description": "Indicates whether day in month is unknown."
                },
                "minute_unknown": {
                    "description": "Indicates whether minute in hour is known."
                },
                "second_unknown": {
                    "description": "Indicates whether minute in hour is known."
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by \u2018,\u2019 (comma) rather than \u2018.\u2019 (period)."
                },
                "has_fractional_second": {
                    "description": "True if the fractional_second part is signficant (i.e. even if = 0.0)."
                },
                "as_string": {
                    "description": "Return the string value in extended format."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                },
                "Year_valid": {
                    "description": "valid_year (year)"
                },
                "Month_valid": {
                    "description": "valid_month (month)"
                },
                "Day_valid": {
                    "description": "valid_day(year, month, day)"
                },
                "Hour_valid": {
                    "description": "valid_hour (hour, minute, second)"
                },
                "Minute_valid": {
                    "description": "not minute_unknown implies valid_minute(minute)"
                },
                "Second_valid": {
                    "description": "not second_unknown implies valid_second (second)"
                },
                "Fractional_second_valid": {
                    "description": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))"
                },
                "Partial_validity_year": {
                    "description": "not month_unknown"
                },
                "Partial_validity_month": {
                    "description": "not month_unknown"
                },
                "Partial_validity_day": {
                    "description": "not day_unknown"
                },
                "Partial_validity_hour": {
                    "description": "not hour_unknown"
                },
                "Partial_validity_minute": {
                    "description": "minute_unknown implies second_unknown"
                },
                "Pre": {
                    "description": "not second_unknown"
                }
            }
        },
        "Iso8601_duration": {
            "title": "Iso8601_duration",
            "description": "Represents an ISO 8601 duration, which may have multiple parts from years down to seconds. Value is in format:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "Returns False."
                },
                "is_extended": {
                    "description": "Returns True."
                },
                "seconds": {
                    "description": "Number of seconds."
                },
                "fractional_seconds": {
                    "description": "Fractional seconds."
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by ',' (comma) rather than '.' (period)."
                },
                "months": {
                    "description": "Number of months."
                },
                "years": {
                    "description": "Number of years of nominal 365-day length."
                },
                "weeks": {
                    "description": "Number of 7 day weeks."
                },
                "to_seconds": {
                    "description": "Total number of seconds equivalent (including fractional) of entire duration."
                },
                "minutes": {
                    "description": "Number of 60 second minutes."
                },
                "hours": {
                    "description": "Number of 60 minute hours."
                },
                "days": {
                    "description": "Number of 24 hour days."
                },
                "as_string": {
                    "description": "Return the duration string value."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                },
                "Years_valid": {
                    "description": "years >= 0"
                },
                "Months_valid": {
                    "description": "months >= 0"
                },
                "Weeks_valid": {
                    "description": "weeks >= 0"
                },
                "Days_valid": {
                    "description": "days >= 0"
                },
                "Hours_valid": {
                    "description": "hours >= 0"
                },
                "Minutes_valid": {
                    "description": "minutes >= 0"
                },
                "Seconds_valid": {
                    "description": "seconds >= 0"
                },
                "Fractional_second_valid": {
                    "description": "fractional_second >= 0.0 and fractional_second < 1.0"
                }
            }
        },
        "Iso8601_time": {
            "title": "Iso8601_time",
            "description": "Represents an ISO 8601 time, including partial and extended forms. Value may be:\n\n* `hh:mm:ss[,sss][Z|\u00b1hh[mm]]` (extended, preferred) or\n* `hhmmss[,sss][Z|\u00b1hh[mm]]` (compact)\n* or a partial invariant.\n\nSee `_valid_iso8601_time()_` for validity.\n\nNOTE: A small deviation to the ISO 8601:2004 standard in this class is that the time `24:00:00` is not allowed, for consistency with `Iso8601_date_time`.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "string",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "True if this time is partial, i.e. if seconds or more is missing."
                },
                "is_extended": {
                    "description": "True if this time uses \u2018-\u2019, \u2018:\u2019 separators."
                },
                "hour": {
                    "description": "Hour in day, in 24-hour time."
                },
                "minute": {
                    "description": "Minute in hour."
                },
                "second": {
                    "description": "Second in minute."
                },
                "fractional_second": {
                    "description": "Fractional seconds."
                },
                "timezone": {
                    "description": "Timezone; may be Void."
                },
                "minute_unknown": {
                    "description": "Indicates whether minute is unknown. If so, the time is of the form \u201chh\u201d."
                },
                "second_unknown": {
                    "description": "Indicates whether second is unknown. If so and month is known, the time is of the form `\"hh:mm\"` or `\"hhmm\"`."
                },
                "is_decimal_sign_comma": {
                    "description": "True if this time has a decimal part indicated by \u2018,\u2019 (comma) rather than \u2018.\u2019 (period)."
                },
                "has_fractional_second": {
                    "description": "True if the fractional_second part is signficant (i.e. even if = 0.0)."
                },
                "as_string": {
                    "description": "Return string value in extended format."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                },
                "Hour_valid": {
                    "description": "valid_hour(hour, minute, second)"
                },
                "Minute_valid": {
                    "description": "not minute_unknown implies valid_minute (minute)"
                },
                "Second_valid": {
                    "description": "not second_unknown implies valid_second (second)"
                },
                "Fractional_second_valid": {
                    "description": "has_fractional_second implies (not second_unknown and valid_fractional_second (fractional_second))"
                },
                "Partial_validity": {
                    "description": "minute_unknown implies second_unknown"
                },
                "Pre": {
                    "description": "not second_unknown"
                }
            }
        },
        "Iso8601_timezone": {
            "title": "Iso8601_timezone",
            "description": "ISO8601 timezone string, in format:\n\n* `Z | \u00b1hh[mm]`\n\nwhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "True if this time zone is partial, i.e. if minutes is missing."
                },
                "is_extended": {
                    "description": "True if this time-zone uses \u2018:\u2019 separators."
                },
                "hour": {
                    "description": "Hour part of timezone - in the range 00 - 13."
                },
                "minute": {
                    "description": "Minute part of timezone. Generally 00 or 30."
                },
                "sign": {
                    "description": "Direction of timezone expresssed as +1 or -1."
                },
                "minute_unknown": {
                    "description": "Indicates whether minute part known."
                },
                "is_gmt": {
                    "description": "True if timezone is UTC, i.e. +0000."
                },
                "as_string": {
                    "description": "Return timezone string."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                },
                "Min_hour_valid": {
                    "description": "sign = -1 implies hour > 0 and hour <= Min_timezone_hour"
                },
                "Max_hour_valid": {
                    "description": "sign = 1 implies hour > 0 and hour <= Max_timezone_hour"
                },
                "Minute_valid": {
                    "description": "not minute_unknown implies valid_minute (minute)"
                },
                "Sign_valid": {
                    "description": "sign = 1 or sign = -1"
                }
            }
        },
        "Iso8601_type": {
            "title": "Iso8601_type",
            "description": "Abstract ancestor type of ISO 8601 types, defining interface for 'extended' and 'partial' concepts from ISO 8601.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Temporal, Time_Definitions",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Temporal",
                "#/definitions/Time_Definitions"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "True if this date time is partial, i.e. if trailing end (right hand) value(s) is/are missing."
                },
                "is_extended": {
                    "description": "True if this ISO8601 string is in the 'extended' form, i.e. uses \u2018-\u2019 and / or \u2018:\u2019 separators. This is the preferred format."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                }
            }
        },
        "Iso8601_date": {
            "title": "Iso8601_date",
            "description": "Represents an ISO 8601 date, including partial and extended forms. Value may be:\n\n* `YYYY-MM-DD` (extended, preferred)\n* `YYYYMMDD` (compactd)\n* a partial invariant.\n\nSee `Time_definitions._valid_iso8601_date()_` for validity.",
            "$comments": "Defined in Foundation_types IM, inherits from Iso8601_type",
            "type": "string",
            "properties": {
                "value": {
                    "description": "Representation of all descendants is a single String.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "value"
            ],
            "$inherits": [
                "#/definitions/Iso8601_type"
            ],
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                },
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                },
                "is_partial": {
                    "description": "True if this date is partial, i.e. if days or more is missing."
                },
                "is_extended": {
                    "description": "True if this date uses `'-'` separators."
                },
                "year": {
                    "description": "Year."
                },
                "month": {
                    "description": "Month in year."
                },
                "day": {
                    "description": "Day in month."
                },
                "timezone": {
                    "description": "Timezone; may be Void."
                },
                "month_unknown": {
                    "description": "Indicates whether month in year is unknown. If so, the date is of the form `\"YYYY\"`."
                },
                "day_unknown": {
                    "description": "Indicates whether day in month is unknown. If so, and month is known, the date is of the form `\"YYYY-MM\"` or `\"YYYYMM\"`."
                },
                "as_string": {
                    "description": "Return string value in extended format."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                },
                "Year_valid": {
                    "description": "valid_year (year)"
                },
                "Month_valid": {
                    "description": "not month_unknown implies valid_month (month)"
                },
                "Day_valid": {
                    "description": "not day_unknown implies valid_day (year, month, day)"
                },
                "Partial_validity": {
                    "description": "month_unknown implies day_unknown"
                },
                "Pre": {
                    "description": "not day_unknown"
                }
            }
        },
        "Interval<Iso8601_date>": {
            "title": "Interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Proper_interval<Iso8601_date>": {
            "title": "Proper_interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Point_interval<Iso8601_date>": {
            "title": "Point_interval<Iso8601_date>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Interval<Iso8601_time>": {
            "title": "Interval<Iso8601_time>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Interval<Iso8601_date_time>": {
            "title": "Interval<Iso8601_date_time>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Interval<Iso8601_duration>": {
            "title": "Interval<Iso8601_duration>",
            "$comments": "Defined in Foundation_types IM",
            "type": "object"
        },
        "Time_Definitions": {
            "title": "Time_Definitions",
            "description": "Definitions for date/time classes. Note that the timezone limits are set by where the international dateline is. Thus, time in New Zealand is quoted using `+12:00`, not `-12:00`.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "$functions": {
                "valid_year": {
                    "description": null
                },
                "valid_month": {
                    "description": null
                },
                "valid_day": {
                    "description": "True if d >= 1 and d <= days_in_month (m, y)"
                },
                "valid_hour": {
                    "description": "True if (h >= 0 and h < Hours_in_day) or (h = Hours_in_day and m = 0 and s = 0)"
                },
                "valid_minute": {
                    "description": "True if m >= 0 and m < Minutes_in_hour."
                },
                "valid_second": {
                    "description": "True if s >= 0 and s < Seconds_in_minute ."
                },
                "valid_fractional_second": {
                    "description": "True if fs >= 0.0 and fs < 1.0 ."
                },
                "valid_iso8601_date": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the complete form:\n\n* `YYYY-MM-DD` (extended, preferred) or one of the partial forms `YYYY-MM` or `YYYY`\n* `YYYYMMDD` (compact) or a partial variant `YYYYMM`.\n\nWhere:\n\n* `YYYY` is the string form of any positive number in the range `0000` - `9999` (zero-filled to four digits)\n* `MM` is `01` - `12` (zero-filled to two digits)\n* `DD` is `01` - `31` (zero-filled to two digits)\n\nThe combinations of `YYYY`, `MM`, `DD` numbers must be correct with respect to the Gregorian calendar."
                },
                "valid_iso8601_time": {
                    "description": "String is a valid ISO 8601 date, i.e. takes the form:\n\n* `hh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `hhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `hh:mm` (extended)\n** `hhmm` or `hh` (compact)\n\nwith an additional optional timezone indicator of:\n\n* `Z` or`\u00b1hh[:mm]` (extended)  `\u00b1hh[mm]` (compact)\n\nWhere:\n\n* `hh` is \"00\" - \"23\" (0-filled to two digits)\n* `mm` is \"00\" - \"59\" (0-filled to two digits)\n* `ss` is \"00\" - \"60\" (0-filled to two digits)\n* `[(,|.)s+]` is an optional string consisting of a comma or decimal point followed by numeric string of 1 or more digits, representing a fractional second\n* `Z` is a literal meaning UTC (modern replacement for GMT), i.e. timezone `+0000`\n"
                },
                "valid_iso8601_date_time": {
                    "description": "String is a valid ISO 8601 date-time, i.e. takes the form:\n\n* `YYYY-MM-DDThh:mm:ss[(,|.)s+][Z|\u00b1hh[:mm]]` (extended)\n* `YYYYMMDDThhmmss[(,|.)s+][Z|\u00b1hh[mm]]` (compact)\n* or one of the partial forms:\n** `YYYY-MM-DDThh:mm` or `YYYY-MM-DDThh` (extended)\n** `YYYYMMDDThhmm` or `YYYYMMDDThh` (compact)"
                },
                "valid_iso8601_duration": {
                    "description": "String is a valid ISO 8601 duration, i.e. takes the form:\n\n* `P[nnY][nnM][nnW][nnD][T[nnH][nnM][nnS]]`\n\nWhere each nn represents a number of years, months, etc. nnW represents a number of 7-day weeks.\n\nNote: allowing the `W` designator in the same expression as other designators is an exception to the published standard, but necessary in clinical information (typically for representing pregnancy duration)."
                }
            },
            "$invariants": {
                "Post": {
                    "description": "Result = fs >= 0.0 and fs < 1.0 ."
                }
            }
        },
        "Temporal": {
            "title": "Temporal",
            "description": "Abstract ancestor of time-related classes.",
            "$comments": "Defined in Foundation_types IM, abstract, inherits from Ordered",
            "type": "object",
            "$inherits": [
                "#/definitions/Ordered"
            ],
            "$functions": {
                "infix <": {
                    "description": "Arithmetic comparison. In conjunction with \u2018=\u2019, enables the definition of the operators \u2018>\u2019, \u2018>=\u2019, \u2018<=\u2019, \u2018<>\u2019. In real type systems, this operator might be defined on another class for comparability."
                }
            }
        },
        "Multiplicity_interval": {
            "title": "Multiplicity_interval",
            "description": "An Interval of Integer, used to represent multiplicity, cardinality and optionality in models. ",
            "$comments": "Defined in Foundation_types IM, inherits from Proper_interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Proper_interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                },
                "is_open": {
                    "description": "True if this interval imposes no constraints, i.e. is set to 0..*"
                },
                "is_optional": {
                    "description": "True if this interval expresses optionality, i.e. 0..1."
                },
                "is_mandatory": {
                    "description": "True if this interval expresses mandation, i.e. 1..1."
                },
                "is_prohibited": {
                    "description": "True if this interval is set to 0..0."
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Proper_interval": {
            "title": "Proper_interval",
            "description": "Type representing a 'proper' Interval, i.e. any two-sided or one-sided interval.",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper": {
                    "description": "Upper bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Interval": {
            "title": "Interval",
            "description": "Interval abstraction, featuring upper and lower limits that may be open or closed, included or not included.",
            "$comments": "Defined in Foundation_types IM, abstract",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Point_interval": {
            "title": "Point_interval",
            "description": "Type representing an Interval that happens to be a point value. Provides an efficient representation that is substitutable for Interval<T> where needed.",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean",
                    "default": "true"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean",
                    "default": "true"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Cardinality": {
            "title": "Cardinality",
            "description": "Express constraints on the cardinality of container objects which are the values of multiply-valued attributes, including uniqueness and ordering, providing the means to state that a container acts like a logical list, set or bag. The cardinality cannot contradict the cardinality of the corresponding attribute within the relevant reference model.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "interval": {
                    "description": "The interval of this cardinality. ",
                    "$ref": "#/definitions/Multiplicity_interval"
                },
                "is_ordered": {
                    "description": "True if the members of the container attribute to which this cardinality refers are ordered. ",
                    "$ref": "#/definitions/Boolean"
                },
                "is_unique": {
                    "description": "True if the members of the container attribute to which this cardinality refers are unique.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "interval",
                "is_ordered",
                "is_unique"
            ],
            "$functions": {
                "is_bag": {
                    "description": "True if the semantics of this cardinality represent a bag, i.e. unordered, non-unique membership."
                },
                "is_list": {
                    "description": "True if the semantics of this cardinality represent a list, i.e. ordered, non-unique membership."
                },
                "is_set": {
                    "description": "True if the semantics of this cardinality represent a set, i.e. unordered, unique membership."
                }
            }
        },
        "Interval<Real>": {
            "title": "Interval<Real>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Interval<Integer>": {
            "title": "Interval<Integer>",
            "$comments": "Defined in Foundation_types IM, inherits from Interval",
            "type": "object",
            "properties": {
                "lower": {
                    "description": "lower bound.",
                    "$ref": "https://www.openEHR.org/releases/ITS-JSON/Release-1.0.0/RM/latest/Common/all.json#/definitions/T"
                },
                "lower_unbounded": {
                    "description": "lower boundary open (i.e. = -infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_unbounded": {
                    "description": "upper boundary open (i.e. = +infinity)",
                    "$ref": "#/definitions/Boolean"
                },
                "lower_included": {
                    "description": "lower boundary value included in range if not lower_unbounded.",
                    "$ref": "#/definitions/Boolean"
                },
                "upper_included": {
                    "description": "upper boundary value included in range if not upper_unbounded.",
                    "$ref": "#/definitions/Boolean"
                }
            },
            "required": [
                "lower_unbounded",
                "upper_unbounded",
                "lower_included",
                "upper_included"
            ],
            "$inherits": [
                "#/definitions/Interval"
            ],
            "$functions": {
                "has": {
                    "description": "True if (lower_unbounded or \n((lower_included and v >= lower) or \nv > lower)) and \n(upper_unbounded or \n((upper_included and v <= upper or v \n< upper)))"
                },
                "intersects": {
                    "description": "True if there is any overlap between intervals represented by Current and `other'. True if at least one limit of other is strictly inside the limits of this interval."
                },
                "contains": {
                    "description": "True if current interval properly contains `other'? True if all points of `other' are inside the current interval."
                },
                "is_equal": {
                    "description": "True if current object's interval is semantically same as `other'."
                },
                "upper": {
                    "description": null
                }
            },
            "$invariants": {
                "Lower_included_valid": {
                    "description": "lower_unbounded implies not lower_included"
                },
                "Upper_included_valid": {
                    "description": "upper_unbounded implies not upper_included"
                },
                "Limits_consistent": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower <= upper"
                },
                "Limits_comparable": {
                    "description": "(not upper_unbounded and not lower_unbounded) implies lower.strictly_comparable_to (upper)"
                }
            }
        },
        "Terminology_code": {
            "title": "Terminology_code",
            "description": "Logically primitive type representing a reference to a terminology concept, in the form of a terminology identifier, optional version, and a code or code string from the terminology.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "terminology_id": {
                    "description": "The archetype environment namespace identifier used to identify a terminology. Typically a value like `\"snomed_ct\"` that is mapped elsewhere to the full URI identifying the terminology.",
                    "$ref": "#/definitions/String"
                },
                "terminology_version": {
                    "description": "Optional string value representing terminology version, typically a date or dotted numeric.",
                    "$ref": "#/definitions/String"
                },
                "code_string": {
                    "description": "A terminology code or post-coordinated code expression, if supported by the terminology. The code may refer to a single term, a value set consisting of multiple terms, or some other entity representable within the terminology.",
                    "$ref": "#/definitions/String"
                },
                "uri": {
                    "description": "The URI reference that may be used as a concrete key into a notional terminology service for queries that can obtain the term text, definition, and other associated elements.",
                    "$ref": "#/definitions/Uri"
                }
            },
            "required": [
                "terminology_id",
                "code_string"
            ]
        },
        "Terminology_term": {
            "title": "Terminology_term",
            "description": "Leaf type representing a term from a terminology, which consists of the term text and the code, i.e. a concept reference.",
            "$comments": "Defined in Foundation_types IM",
            "type": "object",
            "properties": {
                "concept": {
                    "description": "Refrence to the terminology concept formally representing this term.",
                    "$ref": "#/definitions/Terminology_code"
                },
                "text": {
                    "description": "Text of term.",
                    "$ref": "#/definitions/String"
                }
            },
            "required": [
                "concept",
                "text"
            ]
        }
    }
}